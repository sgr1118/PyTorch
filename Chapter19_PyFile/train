{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"authorship_tag":"ABX9TyNoeBmLGJzJS+eey//TRR4G"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","execution_count":null,"metadata":{"id":"WVd9Ka3ae2la"},"outputs":[],"source":["import argparse\n","\n","import torch\n","import torch.nn as nn\n","import torch.optim as optim\n","\n","from mnist_classifier.trainer import Trainer\n","\n","from mnist_classifier.utils import load_mnist\n","from mnist_classifier.utils import split_data\n","from mnist_classifier.utils import get_model\n","\n","# define_argparser를 통하여 입력한 파라미터들을 config라는 객체에 저장한다.\n","\n","# def define_argparser():\n","#     p = argparse.ArgumentParser()\n","\n","#     # 모델 가중치가 저장될 경로\n","#     p.add_argument('--model_fn', required=True) # required=True 실행 시 파라미터가 필수적으로 입력이 되어야 한다.\n","#     # 학습이 수행될 크래픽카드 인덱스 번호 (0부터 시작, 0 또는 그래픽카드 없는 경우 -1)\n","#     p.add_argument('--gpu_id', type = int, default=0 if torch.cuda.is_available() else -1)\n","#     # 학습데이터 내에서 검증 데이터가 차지하는 비율\n","#     p.add_argument('--train_ratio', type = float, default = .8)\n","#     # 미니배치 크기\n","#     p.add_argument('--batch_size', type = int, default = 256)\n","#     # 에포크 개수\n","#     p.add_argument('--n_epochs', type = int, default = 20)\n","\n","#     # 모델의 계층 개수\n","#     p.add_argument('--n_layers', type = int, default = 5)\n","#     # 드롭아웃 사용 여부\n","#     p.add_argument('--use_dropout', action = 'store_true')\n","#     # 드롭아웃 사용 시 드롭 확률\n","#     p.add_argument('--dropout_p', type = float, default = .3)\n","#     # 학습 시 로그 출력의 정도\n","#     p.add_argument('--verbose', type = int, default = 1)\n","\n","#     config = p.parse_args()\n","\n","#     return config\n","\n","def define_argparser():\n","    p = argparse.ArgumentParser()\n","\n","    p.add_argument('--model_fn', required=True)\n","    p.add_argument('--gpu_id', type=int, default=0 if torch.cuda.is_available() else -1)\n","\n","    p.add_argument('--train_ratio', type=float, default=.8)\n","\n","    p.add_argument('--batch_size', type=int, default=256)\n","    p.add_argument('--n_epochs', type=int, default=20)\n","\n","    p.add_argument(\"--model\", default=\"fc\", choices=[\"fc\", \"cnn\", \"rnn\"])\n","\n","    p.add_argument('--n_layers', type=int, default=5)\n","    p.add_argument('--use_dropout', action='store_true')\n","    p.add_argument('--dropout_p', type=float, default=.3)\n","    p.add_argument('--hidden_size', type=int, default=128)\n","\n","    p.add_argument('--verbose', type=int, default=1)\n","\n","    config = p.parse_args()\n","\n","    return config\n","\n","def main(config):\n","    # 시용자 정의 구성에 따라 장치를 설정.\n","    device = torch.device('cpu') if config.gpu_id < 0 else torch.device('cuda:%d' % config.gpu_id)\n","\n","    # 데이터를 불러와 학습/검증용으로 나누기\n","    x, y = load_mnist(is_train=True, flatten=(config.model == \"fc\"))\n","    x, y = split_data(x.to(device), y.to(device), train_ratio=config.train_ratio)\n","\n","    print(\"Train:\", x[0].shape, y[0].shape)\n","    print(\"Valid:\", x[1].shape, y[1].shape)\n","\n","    # 모든 데이터 세트에 대한 모델을 구축하기 위한 입력/출력 크기 가져오기\n","    input_size = int(x[0].shape[-1])\n","    output_size = int(max(y[0])) + 1\n","\n","    # 주어진 구성을 사용하여 모델 빌드\n","    model = get_model(\n","        input_size,\n","        output_size,\n","        config,\n","        device,\n","    ).to(device)\n","    optimizer = optim.Adam(model.parameters())\n","    crit = nn.NLLLoss()\n","\n","    if config.verbose >= 1:\n","        print(model)\n","        print(optimizer)\n","        print(crit)\n","\n","    # 트레이너 오브젝트 초기화\n","    trainer = Trainer(model, optimizer, crit)\n","\n","    # 데이터셋과 설정을 받아와 학습 시작\n","    trainer.train(\n","        train_data=(x[0], y[0]),\n","        valid_data=(x[1], y[1]),\n","        config=config\n","    )\n","\n","    # 최고의 모델을 저장.\n","    torch.save({\n","        'model': trainer.model.state_dict(),\n","        'opt': optimizer.state_dict(),\n","        'config': config,\n","    }, config.model_fn)\n","\n","\n","if __name__ == '__main__':\n","    config = define_argparser()\n","    main(config)"]}]}