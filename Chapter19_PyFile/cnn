{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"authorship_tag":"ABX9TyNdHj0xK2+IioCKTlqUE2J/"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","execution_count":null,"metadata":{"id":"6m1I0jMFolnR"},"outputs":[],"source":["import torch\n","import torch.nn as nn\n","\n","\n","class ConvolutionBlock(nn.Module):\n","\n","    def __init__(self, in_channels, out_channels):\n","        self.in_channels = in_channels\n","        self.out_channels = out_channels\n","\n","        super().__init__()\n","\n","        self.layers = nn.Sequential(\n","            nn.Conv2d(in_channels, out_channels, (3, 3), padding=1),\n","            nn.ReLU(),\n","            nn.BatchNorm2d(out_channels),\n","            nn.Conv2d(out_channels, out_channels, (3, 3), stride=2, padding=1),\n","            nn.ReLU(),\n","            nn.BatchNorm2d(out_channels),\n","        )\n","\n","    def forward(self, x):\n","        # |x| = (batch_size, in_channels, h, w)\n","\n","        y = self.layers(x)\n","        # |y| = (batch_size, out_channels, h, w)\n","\n","        return y\n","\n","\n","class ConvolutionalClassifier(nn.Module):\n","\n","    def __init__(self, output_size):\n","        self.output_size = output_size\n","\n","        super().__init__()\n","\n","        self.blocks = nn.Sequential( # |x| = (n, 1, 28, 28)\n","            ConvolutionBlock(1, 32), # (n, 32, 14, 14)\n","            ConvolutionBlock(32, 64), # (n, 64, 7, 7)\n","            ConvolutionBlock(64, 128), # (n, 128, 4, 4)\n","            ConvolutionBlock(128, 256), # (n, 256, 2, 2)\n","            ConvolutionBlock(256, 512), # (n, 512, 1, 1)\n","        )\n","        self.layers = nn.Sequential(\n","            nn.Linear(512, 50),\n","            nn.ReLU(),\n","            nn.BatchNorm1d(50),\n","            nn.Linear(50, output_size),\n","            nn.LogSoftmax(dim=-1),\n","        )\n","\n","    def forward(self, x):\n","        assert x.dim() > 2\n","\n","        if x.dim() == 3:\n","            # |x| = (batch_size, h, w)\n","            x = x.view(-1, 1, x.size(-2), x.size(-1))\n","        # |x| = (batch_size, 1, h, w)\n","\n","        z = self.blocks(x)\n","        # |z| = (batch_size, 512, 1, 1)\n","\n","        y = self.layers(z.squeeze())\n","        # |y| = (batch_size, output_size)\n","\n","        return "]}]}