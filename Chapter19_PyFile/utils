{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"authorship_tag":"ABX9TyOy0/tXysCTjirOHw2uvxR8"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","execution_count":null,"metadata":{"id":"xUR-A5ztFPLj"},"outputs":[],"source":["import torch\n","\n","from mnist_classifier.models.fc import ImageClassifier\n","from mnist_classifier.models.cnn import ConvolutionalClassifier\n","from mnist_classifier.models.rnn import SequenceClassifier\n","\n","\n","def load_mnist(is_train=True, flatten=True):\n","    from torchvision import datasets, transforms\n","\n","    dataset = datasets.MNIST(\n","        '../data', train=is_train, download=True,\n","        transform=transforms.Compose([\n","            transforms.ToTensor(),\n","        ]),\n","    )\n","\n","    x = dataset.data.float() / 255.\n","    y = dataset.targets\n","\n","    if flatten:\n","        x = x.view(x.size(0), -1)\n","\n","    return x, y\n","\n","\n","def split_data(x, y, train_ratio=.8):\n","    train_cnt = int(x.size(0) * train_ratio)\n","    valid_cnt = x.size(0) - train_cnt\n","\n","    # 학습/검증 데이터셋 셔플\n","    indices = torch.randperm(x.size(0))\n","    x = torch.index_select(\n","        x,\n","        dim=0,\n","        index=indices\n","    ).split([train_cnt, valid_cnt], dim=0)\n","    y = torch.index_select(\n","        y,\n","        dim=0,\n","        index=indices\n","    ).split([train_cnt, valid_cnt], dim=0)\n","\n","    return x, y\n","\n","# 사용자가 모델의 계층 개수만 정해주면 자동으로 등차수열을 적용하여 hidden_size 구하기\n","def get_hidden_sizes(input_size, output_size, n_layers):\n","    step_size = int((input_size - output_size) / n_layers)\n","\n","    hidden_sizes = []\n","    current_size = input_size\n","    for i in range(n_layers - 1):\n","        hidden_sizes += [current_size - step_size]\n","        current_size = hidden_sizes[-1]\n","\n","    return hidden_sizes\n","\n","def get_model(input_size, output_size, config, device):\n","    if config.model == \"fc\":\n","        model = ImageClassifier(\n","            input_size=input_size,\n","            output_size=output_size,\n","            hidden_sizes=get_hidden_sizes(\n","                input_size,\n","                output_size,\n","                config.n_layers\n","            ),\n","            use_batch_norm=not config.use_dropout,\n","            dropout_p=config.dropout_p,\n","        )\n","\n","    elif config.model == 'cnn':\n","        model = ConvolutionalClassifier(output_size)\n","    elif config.model == 'rnn':\n","        model = SequenceClassifier(\n","            input_size=input_size,\n","            hidden_size=config.hidden_size,\n","            output_size=output_size,\n","            n_layers=config.n_layers,\n","            dropout_p=config.dropout_p,\n","        )\n","    else:\n","        raise NotImplementedError\n","\n","    return model"]}]}